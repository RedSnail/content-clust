// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Expression
NumericVector Expression(NumericVector p);
RcppExport SEXP _content_clust_Expression(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Expression(p));
    return rcpp_result_gen;
END_RCPP
}
// OneInAnother
bool OneInAnother(IntegerVector i, int start1, int end1, int start2, int end2);
RcppExport SEXP _content_clust_OneInAnother(SEXP iSEXP, SEXP start1SEXP, SEXP end1SEXP, SEXP start2SEXP, SEXP end2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type start1(start1SEXP);
    Rcpp::traits::input_parameter< int >::type end1(end1SEXP);
    Rcpp::traits::input_parameter< int >::type start2(start2SEXP);
    Rcpp::traits::input_parameter< int >::type end2(end2SEXP);
    rcpp_result_gen = Rcpp::wrap(OneInAnother(i, start1, end1, start2, end2));
    return rcpp_result_gen;
END_RCPP
}
// HasOverlap
bool HasOverlap(IntegerVector i, int start1, int end1, int start2, int end2);
RcppExport SEXP _content_clust_HasOverlap(SEXP iSEXP, SEXP start1SEXP, SEXP end1SEXP, SEXP start2SEXP, SEXP end2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type start1(start1SEXP);
    Rcpp::traits::input_parameter< int >::type end1(end1SEXP);
    Rcpp::traits::input_parameter< int >::type start2(start2SEXP);
    Rcpp::traits::input_parameter< int >::type end2(end2SEXP);
    rcpp_result_gen = Rcpp::wrap(HasOverlap(i, start1, end1, start2, end2));
    return rcpp_result_gen;
END_RCPP
}
// SubstractSorted
IntegerVector SubstractSorted(IntegerVector a, IntegerVector p, int b_start, int b_end);
RcppExport SEXP _content_clust_SubstractSorted(SEXP aSEXP, SEXP pSEXP, SEXP b_startSEXP, SEXP b_endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type b_start(b_startSEXP);
    Rcpp::traits::input_parameter< int >::type b_end(b_endSEXP);
    rcpp_result_gen = Rcpp::wrap(SubstractSorted(a, p, b_start, b_end));
    return rcpp_result_gen;
END_RCPP
}
// content_clust
Rcpp::List content_clust(IntegerVector i, IntegerVector p, int cells, CharacterVector geneNames, IntegerVector geneOrder);
RcppExport SEXP _content_clust_content_clust(SEXP iSEXP, SEXP pSEXP, SEXP cellsSEXP, SEXP geneNamesSEXP, SEXP geneOrderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type cells(cellsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type geneNames(geneNamesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type geneOrder(geneOrderSEXP);
    rcpp_result_gen = Rcpp::wrap(content_clust(i, p, cells, geneNames, geneOrder));
    return rcpp_result_gen;
END_RCPP
}
// c_hello_world
void c_hello_world();
RcppExport SEXP _content_clust_c_hello_world() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    c_hello_world();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_content_clust_Expression", (DL_FUNC) &_content_clust_Expression, 1},
    {"_content_clust_OneInAnother", (DL_FUNC) &_content_clust_OneInAnother, 5},
    {"_content_clust_HasOverlap", (DL_FUNC) &_content_clust_HasOverlap, 5},
    {"_content_clust_SubstractSorted", (DL_FUNC) &_content_clust_SubstractSorted, 4},
    {"_content_clust_content_clust", (DL_FUNC) &_content_clust_content_clust, 5},
    {"_content_clust_c_hello_world", (DL_FUNC) &_content_clust_c_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_content_clust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
